from sqlalchemy import select, func, update, insert, desc
from app.database.models import async_session, User, Broadcast, SubscriptionPlan, UserSubscription, StarsTransaction, Payment
from datetime import datetime, timedelta

async def init_subscription_plans():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–∫–µ—Ç–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏"""
    async with async_session() as session:
        plans_data = [
            {"name": "1 –º–µ—Å—è—Ü", "duration_days": 30, "price": 100, "description": "VPN –¥–æ—Å—Ç—É–ø –Ω–∞ 1 –º–µ—Å—è—Ü"},
            {"name": "3 –º–µ—Å—è—Ü–∞", "duration_days": 90, "price": 250, "description": "VPN –¥–æ—Å—Ç—É–ø –Ω–∞ 3 –º–µ—Å—è—Ü–∞ (—ç–∫–æ–Ω–æ–º–∏—è 17%)"},
            {"name": "6 –º–µ—Å—è—Ü–µ–≤", "duration_days": 180, "price": 350, "description": "VPN –¥–æ—Å—Ç—É–ø –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤ (—ç–∫–æ–Ω–æ–º–∏—è 42%)"},
            {"name": "1 –≥–æ–¥", "duration_days": 365, "price": 500, "description": "VPN –¥–æ—Å—Ç—É–ø –Ω–∞ 1 –≥–æ–¥ (—ç–∫–æ–Ω–æ–º–∏—è 58%)"},
        ]
        
        for plan_data in plans_data:
            existing = await session.scalar(
                select(SubscriptionPlan).where(SubscriptionPlan.name == plan_data["name"])
            )
            if not existing:
                plan = SubscriptionPlan(**plan_data)
                session.add(plan)
        
        await session.commit()
        print("‚úÖ –ü–∞–∫–µ—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

async def set_user(tg_id: int, username: str = None, first_name: str = None, last_name: str = None):
    """–°–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.tg_id == tg_id))
        if user:
            if username and user.username != username:
                user.username = username
            if first_name and user.first_name != first_name:
                user.first_name = first_name
            if last_name and user.last_name != last_name:
                user.last_name = last_name
            user.last_activity = datetime.utcnow()
            await session.commit()
            return user
        else:
            from uuid import uuid4
            new_user = User(
                tg_id=tg_id,
                username=username,
                first_name=first_name,
                last_name=last_name,
                ref_code=uuid4().hex[:8],
                expires=datetime.utcnow() + timedelta(hours=24),
                registration_date=datetime.utcnow(),
                last_activity=datetime.utcnow()
            )
            session.add(new_user)
            await session.commit()
            await session.refresh(new_user)
            return new_user

async def get_user(tg_id: int):
    async with async_session() as session:
        return await session.scalar(select(User).where(User.tg_id == tg_id))

async def get_user_profile(tg_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è"""
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.tg_id == tg_id))
        if user:
            referrals_count = await session.scalar(
                select(func.count(User.id)).where(User.invited_by == user.ref_code)
            )
            
            active_subscription = await session.scalar(
                select(UserSubscription).where(
                    UserSubscription.user_id == user.id,
                    UserSubscription.is_active == True,
                    UserSubscription.end_date > datetime.utcnow()
                )
            )
            
            return {
                'user': user,
                'referrals_count': referrals_count,
                'active_subscription': active_subscription
            }
        return None
    
async def _get_subscription_duration(telegram_id: int) -> int:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–Ω—è—Ö"""
    async with async_session() as session:
        from app.database.models import UserSubscription, SubscriptionPlan
        
        subscription = await session.scalar(
            select(UserSubscription).where(
                UserSubscription.user_id == telegram_id,
                UserSubscription.is_active == True
            )
        )
        
        if subscription and subscription.plan:
            return subscription.plan.duration_days
        
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        user = await session.scalar(select(User).where(User.tg_id == telegram_id))
        if user and user.expires and user.expires > datetime.utcnow():
            days_left = (user.expires - datetime.utcnow()).days
            return max(1, days_left)  # –ú–∏–Ω–∏–º—É–º 1 –¥–µ–Ω—å
        
        return 0
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º VLESS –∫–æ–Ω—Ñ–∏–≥
    vless_config = vless_manager.get_user_config(message.from_user.id)
    
    if not vless_config:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
        duration_days = await _get_subscription_duration(message.from_user.id)
        if duration_days == 0:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥
        result = vless_manager.create_vless_config(message.from_user.id, duration_days)
        vless_config = result["config"]
        vless_link = result["vless_link"]
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
        if datetime.now().timestamp() > vless_config["expires_at"]:
            vless_manager.deactivate_user(message.from_user.id)
            await message.answer("‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–≥–æ VPN –∫–ª—é—á–∞ –∏—Å—Ç–µ–∫!")
            return
        
        vless_link = vless_manager._generate_vless_link(
            vless_config["uuid"], 
            vless_config["ws_path"], 
            vless_config["email"]
        )

    # –°–æ–∑–¥–∞–µ–º QR –∫–æ–¥
    qr_img = qrcode.make(vless_link)
    buf = io.BytesIO()
    qr_img.save(buf, format='PNG')
    qr_b64 = base64.b64encode(buf.getvalue()).decode()
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
    expire_date = datetime.fromtimestamp(vless_config["expires_at"])
    days_left = (expire_date - datetime.now()).days
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å QR –∫–æ–¥–æ–º –∏ —Å—Å—ã–ª–∫–æ–π
    message_text = (
        f"üîë <b>–í–∞—à VPN –∫–ª—é—á</b>\n\n"
        f"üÜî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {vless_config['email']}\n"
        f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expire_date.strftime('%d.%m.%Y %H:%M')}\n"
        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n\n"
        f"<b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n"
        f"<code>{vless_link}</code>\n\n"
        f"üì± <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</b>\n"
        f"1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2RayNG (Android) –∏–ª–∏ Shadowrocket (iOS)\n"
        f"2. –ù–∞–∂–º–∏—Ç–µ \"+\" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n"
        f"3. –í—ã–±–µ—Ä–∏—Ç–µ \"–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞\"\n"
        f"4. –ò–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –Ω–∏–∂–µ\n\n"
        f"‚ö†Ô∏è <b>–ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º!</b>"
    )
    
    # –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥
    # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å —Å—Å—ã–ª–∫–æ–π
    await message.answer(message_text)
    
    
    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á
    vless_manager.deactivate_user(message.from_user.id)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
    duration_days = await _get_subscription_duration(message.from_user.id)
    result = vless_manager.create_vless_config(message.from_user.id, duration_days)
    
    expire_date = datetime.fromtimestamp(result["config"]["expires_at"])
    
    await message.answer(
        f"‚úÖ <b>VPN –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
        f"üîë –ù–æ–≤—ã–π –∫–ª—é—á —Å–æ–∑–¥–∞–Ω\n"
        f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expire_date.strftime('%d.%m.%Y')}\n\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"üîë –ú–æ–π VPN –∫–ª—é—á\" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏.",
        reply_markup=get_main_keyboard(message.from_user.id)
    )


async def add_user_if_not_exists(tg_id: int, ref_code: str, invited_by: str = None, expires: datetime = None):
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.tg_id == tg_id))
        if not user:
            from uuid import uuid4
            new_user = User(
                tg_id=tg_id,
                ref_code=ref_code or uuid4().hex[:8],
                invited_by=invited_by,
                expires=expires or (datetime.utcnow() + timedelta(hours=24)),
                registration_date=datetime.utcnow(),
                last_activity=datetime.utcnow()
            )
            session.add(new_user)
            await session.commit()
            await session.refresh(new_user)
            
            if invited_by:
                await add_bonus_days_to_ref(invited_by, 7)
                await add_stars_to_user_by_ref_code(invited_by, 10)
                
            return new_user
        return user

async def add_stars_to_user(tg_id: int, amount: int, transaction_type: str, description: str = ""):
    """–î–æ–±–∞–≤–ª—è–µ—Ç stars –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö"""
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.tg_id == tg_id))
        if user:
            user.stars_balance += amount
            if amount > 0:
                user.total_earned_stars += amount
            
            transaction = StarsTransaction(
                user_id=user.id,
                amount=amount,
                transaction_type=transaction_type,
                description=description
            )
            session.add(transaction)
            await session.commit()
            return True
        return False

async def add_stars_to_user_by_ref_code(ref_code: str, amount: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç stars –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É"""
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.ref_code == ref_code))
        if user:
            return await add_stars_to_user(user.tg_id, amount, 'referral', '–ë–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ')
        return False

async def get_user_transactions(tg_id: int, limit: int = 10):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.tg_id == tg_id))
        if user:
            transactions = await session.scalars(
                select(StarsTransaction)
                .where(StarsTransaction.user_id == user.id)
                .order_by(desc(StarsTransaction.created_at))
                .limit(limit)
            )
            return transactions.all()
        return []

async def update_referral_bonus(user_id: int) -> int:
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.id == user_id))
        if not user:
            return 0
            
        referrals_count = await session.scalar(
            select(func.count(User.id)).where(User.invited_by == user.ref_code)
        )
        
        total_bonus = referrals_count * 7
        return total_bonus

async def add_bonus_days_to_ref(ref_code: str, days: int):
    async with async_session() as session:
        ref_user = await session.scalar(select(User).where(User.ref_code == ref_code))
        if not ref_user:
            return False
            
        if not ref_user.expires or ref_user.expires < datetime.utcnow():
            ref_user.expires = datetime.utcnow() + timedelta(days=days)
        else:
            ref_user.expires += timedelta(days=days)
            
        await session.commit()
        return True

async def count_users():
    async with async_session() as s:
        return await s.scalar(select(func.count(User.id)))

async def get_all_users():
    async with async_session() as s:
        return (await s.execute(select(User))).scalars().all()

async def save_broadcast(text, total):
    async with async_session() as s:
        b = Broadcast(text=text, total=total)
        s.add(b)
        await s.commit()
        await s.refresh(b)
        return b

async def count_broadcasts():
    async with async_session() as s:
        return await s.scalar(select(func.count(Broadcast.id)))

async def update_broadcast_sent(b_id, sent):
    async with async_session() as s:
        await s.execute(
            update(Broadcast).where(Broadcast.id == b_id).values(sent=sent)
        )
        await s.commit()

async def get_subscription_plans():
    async with async_session() as session:
        return await session.scalars(select(SubscriptionPlan).where(SubscriptionPlan.is_active == True))

async def get_plan(plan_id: int):
    async with async_session() as session:
        return await session.scalar(select(SubscriptionPlan).where(SubscriptionPlan.id == plan_id))

async def purchase_subscription(tg_id: int, plan_id: int) -> dict:
    """–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞ stars"""
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.tg_id == tg_id))
        plan = await session.scalar(select(SubscriptionPlan).where(SubscriptionPlan.id == plan_id))
        
        if not user or not plan:
            return {'success': False, 'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω'}
            
        if user.stars_balance < plan.price:
            return {'success': False, 'message': f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars. –ù—É–∂–Ω–æ: {plan.price}, —É –≤–∞—Å: {user.stars_balance}'}
        
        user.stars_balance -= plan.price
        
        await session.execute(
            update(UserSubscription)
            .where(UserSubscription.user_id == user.id)
            .values(is_active=False)
        )
        
        end_date = datetime.utcnow() + timedelta(days=plan.duration_days)
        new_sub = UserSubscription(
            user_id=user.id,
            plan_id=plan_id,
            start_date=datetime.utcnow(),
            end_date=end_date,
            is_active=True,
            stars_paid=plan.price
        )
        session.add(new_sub)
        
        user.expires = end_date
        
        transaction = StarsTransaction(
            user_id=user.id,
            amount=-plan.price,
            transaction_type='purchase',
            description=f'–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {plan.name}'
        )
        session.add(transaction)
        
        await session.commit()
        
        return {
            'success': True, 
            'message': f'–ü–æ–¥–ø–∏—Å–∫–∞ "{plan.name}" –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {end_date.strftime("%d.%m.%Y")}',
            'end_date': end_date,
            'duration_days': plan.duration_days,
            'stars_used': plan.price,
            'remaining_balance': user.stars_balance
        }

async def check_subscription_status(tg_id: int):
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.tg_id == tg_id))
        if not user:
            return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
        if user.expires and user.expires > datetime.utcnow():
            days_left = (user.expires - datetime.utcnow()).days
            status_text = f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {user.expires.strftime('%d.%m.%Y')} ({days_left} –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å)"
            return True, status_text
        else:
            return False, "–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞"

async def create_payment(user_id: int, amount: int, invoice_payload: str = "") -> Payment:
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ"""
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.id == user_id))
        if not user:
            return None
            
        payment = Payment(
            user_id=user_id,
            amount=amount,
            invoice_payload=invoice_payload,
            status='pending'
        )
        session.add(payment)
        await session.commit()
        await session.refresh(payment)
        return payment

async def complete_payment(payment_id: int, provider_payment_charge_id: str, telegram_payment_charge_id: str) -> bool:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –∏ –Ω–∞—á–∏—Å–ª—è–µ—Ç stars"""
    async with async_session() as session:
        payment = await session.scalar(select(Payment).where(Payment.id == payment_id))
        if not payment:
            return False
            
        payment.status = 'completed'
        payment.provider_payment_charge_id = provider_payment_charge_id
        payment.telegram_payment_charge_id = telegram_payment_charge_id
        payment.completed_at = datetime.utcnow()
        
        user = await session.scalar(select(User).where(User.id == payment.user_id))
        user.stars_balance += payment.amount
        user.total_earned_stars += payment.amount
        
        transaction = StarsTransaction(
            user_id=user.id,
            amount=payment.amount,
            transaction_type='deposit',
            description='–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ Telegram Stars'
        )
        session.add(transaction)
        
        await session.commit()
        return True

async def get_user_payments(tg_id: int, limit: int = 10):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.tg_id == tg_id))
        if user:
            payments = await session.scalars(
                select(Payment)
                .where(Payment.user_id == user.id)
                .order_by(desc(Payment.created_at))
                .limit(limit)
            )
            return payments.all()
        return []