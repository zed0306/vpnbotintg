from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message, CallbackQuery, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup,
    KeyboardButton, PreCheckoutQuery, SuccessfulPayment,
    LabeledPrice
)
from app.vless_generator import vless_manager
from sqlalchemy import select 
import io
import base64
import qrcode
from aiogram.types import BufferedInputFile
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
from uuid import uuid4
import app.database.requests as rq
import app.keyboard as kb


router = Router()

CHANNEL = "@tectnetbot"
ADMIN_ID = 1411430230
# –î–ª—è Telegram Stars provider_token –Ω–µ –Ω—É–∂–µ–Ω - –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º
PROVIDER_TOKEN = ""

def get_main_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    keyboard = [
        [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="üì¶ –ü–æ–¥–ø–∏—Å–∫–∞")],
        [KeyboardButton(text="üîë –ú–æ–π VPN –∫–ª—é—á"), KeyboardButton(text="‚≠ê –ú–æ–π –±–∞–ª–∞–Ω—Å")],
        [KeyboardButton(text="üë• –ú–æ–∏ —Ä–µ—Ñ—Ñ–µ—Ä–∞–ª—ã"), KeyboardButton(text="üí´ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")]
    ]
    if user_id == ADMIN_ID:
        keyboard.append([KeyboardButton(text="üë®‚Äçüíª –ê–¥–º–∏–Ω–∫–∞")])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

async def _get_subscription_duration(telegram_id: int) -> int:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–Ω—è—Ö"""
    user_profile = await rq.get_user_profile(telegram_id)
    if not user_profile:
        return 0
        
    user = user_profile['user']
    active_subscription = user_profile.get('active_subscription')
    
    if active_subscription and active_subscription.end_date > datetime.utcnow():
        return (active_subscription.end_date - datetime.utcnow()).days
    
    if user and user.expires and user.expires > datetime.utcnow():
        days_left = (user.expires - datetime.utcnow()).days
        return max(1, days_left)
    
    return 0

# ======= –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø TELEGRAM STARS =======

@router.message(F.text == "üí´ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")
async def buy_stars_menu(message: Message):
    user = await rq.get_user(message.from_user.id)
    if not user:
        user = await rq.set_user(message.from_user.id, message.from_user.username)
    
    await message.answer(
        f"üí´ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ Stars</b>\n\n"
        f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{user.stars_balance} ‚≠ê</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç Stars –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:\n\n"
        "üíé <b>100 Stars</b> - 100 ‚≠ê\n"
        "üíé <b>500 Stars</b> - 500 ‚≠ê\n" 
        "üíé <b>1000 Stars</b> - 1000 ‚≠ê\n"
        "üíé <b>5000 Stars</b> - 5000 ‚≠ê\n\n",
        reply_markup=kb.buy_stars_keyboard()
    )

@router.callback_query(F.data.startswith("stars_"))
async def process_stars_purchase(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞ Stars"""
    stars_map = {
        "stars_100": {"amount": 100},
        "stars_500": {"amount": 500},
        "stars_1000": {"amount": 1000},
        "stars_5000": {"amount": 5000}
    }
    
    package_data = stars_map.get(callback.data)
    if not package_data:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞–∫–µ—Ç")
        return
    
    amount = package_data["amount"]
    
    user = await rq.get_user(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ Stars (–≤–∞–ª—é—Ç–∞ XTR)
    # –î–ª—è Stars amount —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞—Ö (1 Star = 1 –µ–¥–∏–Ω–∏—Ü–∞)
    prices = [LabeledPrice(label=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} Stars", amount=amount)]
    
    invoice_title = f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ {amount} Stars"
    invoice_description = f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ VPN –±–æ—Ç–µ. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã {amount} Stars –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç."
    invoice_payload = f"stars_{amount}_{user.tg_id}_{uuid4().hex[:8]}"
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑–µ
    payment = await rq.create_payment(user.id, amount, invoice_payload)
    if not payment:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞")
        return
    
    try:
        await callback.bot.send_invoice(
            chat_id=callback.from_user.id,
            title=invoice_title,
            description=invoice_description,
            payload=invoice_payload,
            provider_token=PROVIDER_TOKEN,  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è Stars
            currency="XTR",  # –í–∞–ª—é—Ç–∞ Telegram Stars
            prices=prices,
            start_parameter="stars-purchase",
            need_email=False,
            need_phone_number=False,
            need_shipping_address=False,
            is_flexible=False,
            max_tip_amount=0,
            suggested_tip_amounts=[]
        )
        await callback.answer()
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞: {e}")

@router.pre_checkout_query()
async def process_pre_checkout(pre_checkout_query: PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ–ø–ª–∞—Ç—ã"""
    await pre_checkout_query.bot.answer_pre_checkout_query(
        pre_checkout_query_id=pre_checkout_query.id,
        ok=True,
        error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    )

@router.message(F.successful_payment)
async def process_successful_payment(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    payment_info = message.successful_payment
    payload = payment_info.invoice_payload
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –≤ –≤–∞–ª—é—Ç–µ XTR (Telegram Stars)
    if payment_info.currency != "XTR":
        await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–∞–ª—é—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞")
        return
    
    if payload.startswith("stars_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ Stars
        parts = payload.split("_")
        if len(parts) >= 3:
            amount = int(parts[1])
            user_tg_id = int(parts[2])
            
            user = await rq.get_user(user_tg_id)
            if user:
                # –ù–∞—Ö–æ–¥–∏–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑–µ –ø–æ payload
                payments = await rq.get_user_payments(user_tg_id)
                target_payment = None
                for payment in payments:
                    if payment.invoice_payload == payload:
                        target_payment = payment
                        break
                
                if target_payment:
                    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∏ –Ω–∞—á–∏—Å–ª—è–µ–º Stars
                    success = await rq.complete_payment(
                        target_payment.id,
                        payment_info.provider_payment_charge_id,
                        payment_info.telegram_payment_charge_id
                    )
                    
                    if success:
                        updated_user = await rq.get_user(user_tg_id)
                        await message.answer(
                            f"üéâ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
                            f"üí´ –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ: <b>{amount} Stars</b>\n"
                            f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{updated_user.stars_balance} ‚≠ê</b>\n\n"
                            f"üí≥ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {payment_info.telegram_payment_charge_id}\n"
                            f"üìÖ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ \"üì¶ –ü–æ–¥–ø–∏—Å–∫–∞\"",
                            reply_markup=get_main_keyboard(message.from_user.id)
                        )
                    else:
                        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞")
                else:
                    await message.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
            else:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    else:
        await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞")

# ======= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–û–î–ü–ò–°–ö–ò =======

@router.message(F.text == "üì¶ –ü–æ–¥–ø–∏—Å–∫–∞")
async def subscription(message: Message):
    is_active, status_text = await rq.check_subscription_status(message.from_user.id)
    user = await rq.get_user(message.from_user.id)
    
    subscription_text = "üì¶ <b>–ü–∞–∫–µ—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ VPN</b>\n\n"
    subscription_text += f"üõ°Ô∏è <b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {'‚úÖ ' + status_text if is_active else '‚ùå ' + status_text}\n"
    subscription_text += f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {user.stars_balance if user else 0} ‚≠ê\n\n"
    subscription_text += "üíé <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:</b>\n"
    
    await message.answer(subscription_text, reply_markup=await kb.subscription_plans_keyboard())

@router.callback_query(F.data.startswith("subscribe_"))
async def process_subscription(callback: CallbackQuery):
    plan_id = int(callback.data.split("_")[1])
    plan = await rq.get_plan(plan_id)
    user = await rq.get_user(callback.from_user.id)
    
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    if plan:
        purchase_text = (
            f"üì¶ <b>–ü–∞–∫–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
            f"üíé –ù–∞–∑–≤–∞–Ω–∏–µ: {plan.name}\n"
            f"‚≠ê –¶–µ–Ω–∞: {plan.price} Stars\n"
            f"üìÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {plan.duration_days} –¥–Ω–µ–π\n"
            f"üìù {plan.description}\n\n"
            f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {user.stars_balance} Stars\n\n"
        )
        
        if user.stars_balance >= plan.price:
            purchase_text += "‚úÖ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars –¥–ª—è –ø–æ–∫—É–ø–∫–∏!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=f"üõí –ö—É–ø–∏—Ç—å –∑–∞ {plan.price} ‚≠ê", callback_data=f"confirm_subscribe_{plan_id}")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_subscriptions")]
            ])
        else:
            purchase_text += f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Stars. –ù—É–∂–Ω–æ –µ—â–µ {plan.price - user.stars_balance} ‚≠ê"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí´ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="buy_stars")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_subscriptions")]
            ])
        
        await callback.message.edit_text(purchase_text, reply_markup=keyboard)
    else:
        await callback.message.edit_text("‚ùå –ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_subscribe_"))
async def confirm_subscription(callback: CallbackQuery):
    plan_id = int(callback.data.split("_")[2])
    result = await rq.purchase_subscription(callback.from_user.id, plan_id)
    
    if result['success']:
        # –°–æ–∑–¥–∞–µ–º VLESS –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        duration_days = result.get('duration_days', 30)
        vless_result = vless_manager.create_vless_config(callback.from_user.id, duration_days)
        
        expire_date = datetime.fromtimestamp(vless_result["config"]["expires_at"])
        
        await callback.message.edit_text(
            f"üéâ {result['message']}\n\n"
            f"üîë <b>–í–∞—à VPN –∫–ª—é—á —Å–æ–∑–¥–∞–Ω!</b>\n"
            f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expire_date.strftime('%d.%m.%Y')}\n"
            f"‚≠ê –°–ø–∏—Å–∞–Ω–æ: {result.get('stars_used', 0)} Stars\n"
            f"üí´ –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: {result.get('remaining_balance', 0)} Stars\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É \"üîë –ú–æ–π VPN –∫–ª—é—á\" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîë –ü–æ–ª—É—á–∏—Ç—å VPN –∫–ª—é—á", callback_data="get_vless_key")],
                [InlineKeyboardButton(text="üë§ –í –ø—Ä–æ—Ñ–∏–ª—å", callback_data="my_profile")]
            ])
        )
    else:
        await callback.message.edit_text(f"‚ùå {result['message']}")
    
    await callback.answer()

# ======= –û–°–¢–ê–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =======

@router.message(CommandStart())
async def cmd_start(message: Message):
    args = message.text.split(maxsplit=1)
    ref_code = None
    if len(args) > 1:
        ref_code = args[1].replace("/start", "").strip()

    try:
        member = await message.bot.get_chat_member(CHANNEL, message.from_user.id)
        if member.status in ("creator", "administrator", "member"):
            user = await rq.add_user_if_not_exists(
                tg_id=message.from_user.id,
                ref_code=uuid4().hex[:8],
                invited_by=ref_code if ref_code else None,
                expires=datetime.utcnow() + timedelta(hours=24)
            )

            await message.answer(
                f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN –±–æ—Ç!\n\n"
                f"üí´ –í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥: 24 —á–∞—Å–∞\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å Stars: 0 ‚≠ê\n\n"
                f"üì¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\n"
                f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
                f"https://t.me/{(await message.bot.get_me()).username}?start={user.ref_code}",
                reply_markup=get_main_keyboard(message.from_user.id)
            )
        else:
            await message.answer(
                f"üì¢ –ß—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n{CHANNEL}\n\n"
                f"–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏üëá",
                reply_markup=kb.subscribe_keyboard(CHANNEL)
            )
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message):
    profile_data = await rq.get_user_profile(message.from_user.id)
    if not profile_data:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
        
    user = profile_data['user']
    referrals_count = profile_data['referrals_count']
    
    is_active, status_text = await rq.check_subscription_status(message.from_user.id)
    
    profile_text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üÜî ID: {user.tg_id}\n"
        f"üë§ –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} {user.last_name or ''}\n"
        f"üìß Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.registration_date.strftime('%d.%m.%Y')}\n\n"
        f"‚≠ê <b>–ë–∞–ª–∞–Ω—Å Stars:</b> {user.stars_balance}\n"
        f"üí∞ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {user.total_earned_stars} ‚≠ê\n\n"
        f"üìä <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:</b>\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {referrals_count}\n"
        f"üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n"
        f"https://t.me/{(await message.bot.get_me()).username}?start={user.ref_code}\n\n"
        f"üõ°Ô∏è <b>–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n"
        f"{'‚úÖ ' + status_text if is_active else '‚ùå ' + status_text}"
    )
    
    await message.answer(profile_text, reply_markup=kb.profile_keyboard())

async def show_vless_key_message(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç VLESS –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await rq.get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
    is_active, status_text = await rq.check_subscription_status(message.from_user.id)
    
    if not is_active:
        await message.answer(
            f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏!\n\n"
            f"{status_text}\n\n"
            f"–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ \"üì¶ –ü–æ–¥–ø–∏—Å–∫–∞\"",
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º VLESS –∫–æ–Ω—Ñ–∏–≥
    vless_config = vless_manager.get_user_config(message.from_user.id)
    
    if not vless_config:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
        duration_days = await _get_subscription_duration(message.from_user.id)
        if duration_days == 0:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥
        result = vless_manager.create_vless_config(message.from_user.id, duration_days)
        vless_config = result["config"]
        vless_link = result["vless_link"]
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
        if datetime.now().timestamp() > vless_config["expires_at"]:
            vless_manager.deactivate_user(message.from_user.id)
            await message.answer("‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–≥–æ VPN –∫–ª—é—á–∞ –∏—Å—Ç–µ–∫!")
            return
        
        vless_link = vless_manager._generate_vless_link(
            vless_config["uuid"], 
            vless_config["ws_path"], 
            vless_config["email"]
        )

    # –°–æ–∑–¥–∞–µ–º QR –∫–æ–¥
    qr_img = qrcode.make(vless_link)
    buf = io.BytesIO()
    qr_img.save(buf, format='PNG')
    buf.seek(0)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
    expire_date = datetime.fromtimestamp(vless_config["expires_at"])
    days_left = (expire_date - datetime.now()).days
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å QR –∫–æ–¥–æ–º –∏ —Å—Å—ã–ª–∫–æ–π
    message_text = (
        f"üîë <b>–í–∞—à VPN –∫–ª—é—á</b>\n\n"
        f"üÜî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {vless_config['email']}\n"
        f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expire_date.strftime('%d.%m.%Y %H:%M')}\n"
        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n\n"
        f"<b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n"
        f"<code>{vless_link}</code>\n\n"
        f"üì± <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</b>\n"
        f"1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2RayNG (Android) –∏–ª–∏ Shadowrocket (iOS)\n"
        f"2. –ù–∞–∂–º–∏—Ç–µ \"+\" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n"
        f"3. –í—ã–±–µ—Ä–∏—Ç–µ \"–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞\"\n"
        f"4. –ò–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –Ω–∏–∂–µ\n\n"
        f"‚ö†Ô∏è <b>–ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º!</b>"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ QR –∫–æ–¥
    await message.answer_photo(photo=('qrcode.png', buf), caption=message_text)

@router.message(F.text == "üîë –ú–æ–π VPN –∫–ª—é—á")
async def show_vless_key(message: Message):
    await show_vless_key_message(message)

async def show_vless_key_message(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç VLESS –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await rq.get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

@router.message(F.text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á")
async def refresh_vless_key(message: Message):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç VLESS –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await rq.get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
    is_active, status_text = await rq.check_subscription_status(message.from_user.id)
    
    if not is_active:
        await message.answer(
            f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏!\n\n"
            f"{status_text}\n\n"
            f"–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ \"üì¶ –ü–æ–¥–ø–∏—Å–∫–∞\"",
            reply_markup=get_main_keyboard(message.from_user.id)
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º VLESS –∫–æ–Ω—Ñ–∏–≥
    vless_config = vless_manager.get_user_config(message.from_user.id)
    
    if not vless_config:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
        duration_days = await _get_subscription_duration(message.from_user.id)
        if duration_days == 0:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏")
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥
        result = vless_manager.create_vless_config(message.from_user.id, duration_days)
        vless_config = result["config"]
        vless_link = result["vless_link"]
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
        if datetime.now().timestamp() > vless_config["expires_at"]:
            vless_manager.deactivate_user(message.from_user.id)
            await message.answer("‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–≥–æ VPN –∫–ª—é—á–∞ –∏—Å—Ç–µ–∫!")
            return
        
        vless_link = vless_manager._generate_vless_link(
            vless_config["uuid"], 
            vless_config["ws_path"], 
            vless_config["email"]
        )

    # –°–æ–∑–¥–∞–µ–º QR –∫–æ–¥
    qr_img = qrcode.make(vless_link)
    buf = io.BytesIO()
    qr_img.save(buf, format='PNG')
    buf.seek(0)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
    expire_date = datetime.fromtimestamp(vless_config["expires_at"])
    days_left = (expire_date - datetime.now()).days
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å QR –∫–æ–¥–æ–º –∏ —Å—Å—ã–ª–∫–æ–π
    message_text = (
        f"üîë <b>–í–∞—à VPN –∫–ª—é—á</b>\n\n"
        f"üÜî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {vless_config['email']}\n"
        f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expire_date.strftime('%d.%m.%Y %H:%M')}\n"
        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n\n"
        f"<b>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n"
        f"<code>{vless_link}</code>\n\n"
        f"üì± <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</b>\n"
        f"1. –°–∫–∞—á–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2RayNG (Android) –∏–ª–∏ Shadowrocket (iOS)\n"
        f"2. –ù–∞–∂–º–∏—Ç–µ \"+\" –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏\n"
        f"3. –í—ã–±–µ—Ä–∏—Ç–µ \"–ò–º–ø–æ—Ä—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞\"\n"
        f"4. –ò–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –Ω–∏–∂–µ\n\n"
        f"‚ö†Ô∏è <b>–ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º!</b>"
    )
    
    # –°–æ–∑–¥–∞–µ–º BufferedInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
    photo_file = BufferedInputFile(buf.getvalue(), filename="qrcode.png")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º
    await message.answer_photo(
        photo=photo_file, 
        caption=message_text,
        reply_markup=get_main_keyboard(message.from_user.id)
    )

@router.message(F.text == "‚≠ê –ú–æ–π –±–∞–ª–∞–Ω—Å")
async def show_balance(message: Message):
    user = await rq.get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    payments = await rq.get_user_payments(message.from_user.id, 5)
    transactions = await rq.get_user_transactions(message.from_user.id, 5)
    
    balance_text = f"‚≠ê <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {user.stars_balance} Stars\n"
    balance_text += f"üí∞ <b>–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ:</b> {user.total_earned_stars} Stars\n\n"
    
    if payments:
        balance_text += "üí≥ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n"
        for payment in payments[:3]:
            status_icon = "‚úÖ" if payment.status == 'completed' else "‚è≥"